import { createSlice, PayloadAction } from "@reduxjs/toolkit";

import type { AppState, AppThunk } from "../index";

//  模块的 state ts描述
export interface CommonState {
  lang: string;
}

//  模块的 state 初始值
export const initialState: CommonState = {
  lang: "zh",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount)
//     // The value we return becomes the `fulfilled` action payload
//     return response.data
//   }
// )

export const commonSlice = createSlice({
  //  模块名
  name: "common",
  // 配置初始值
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  // 定义reducer
  reducers: {
    setLang: (state, action: PayloadAction<string>) => {
      state.lang = action.payload;
    },
    // @ts-ignore
    setCommon: (state, action: PayloadAction<object>) => {
      return action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     builder
  //       .addCase(incrementAsync.pending, (state) => {
  //         state.status = "loading";
  //       })
  //       .addCase(incrementAsync.fulfilled, (state, action) => {
  //         state.status = "idle";
  //         state.value += action.payload;
  //       });
  //   },
});

// 暴露转换的 actions
export const { setLang, toggleLang, setCommon } = commonSlice.actions;
export const commonActions = commonSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectLang = (state: AppState) => state.common.lang;
export const selectCommon = (state: AppState) => state.common;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const setLangIfNotPresent =
  (lang: string): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectLang(getState());
    if (currentValue === null || currentValue === undefined) {
      dispatch(setLang(lang));
    }
  };

export default commonSlice.reducer;
