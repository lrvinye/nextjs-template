import {
  createAsyncThunk,
  createSlice,
  PayloadAction,
  Slice,
} from "@reduxjs/toolkit";
import { AppState, AppThunk } from "../index";

//  模块的 state ts描述
export interface State {
  uid: string | undefined;
  accessToken: string | undefined;
  userInfo: object | undefined;
}

//  模块的 state 初始值
export const initialState: State = {
  uid: undefined,
  accessToken: undefined,
  userInfo: {},
};

// 使用 Thunk 执行异步 !流程! 操作
export const login = createAsyncThunk(
  "user/login",
  async (param: { uid: string; token: string }, thunkAPI) => {
    thunkAPI.dispatch(setUidAndToken(param));
    const res = await fetch(`user/${param.uid}`);
    const info = await res.json();
    if (info) thunkAPI.dispatch(setUserInfo(info));
    // The value we return becomes the `fulfilled` action payload
    // return param;
  }
);

export const userSlice: Slice = createSlice({
  //  模块名
  name: "user",
  // 配置初始值
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  // 定义reducer
  reducers: {
    setUidAndToken(
      state,
      action: PayloadAction<{ uid: string; token: string }>
    ) {
      state.uid = action.payload.uid;
      state.accessToken = action.payload.token;
    },
    setUserInfo: (state, action: PayloadAction<object>) => {
      state.userInfo = action.payload;
    },
    // @ts-ignore
    setUser: (state, action: PayloadAction<object>) => {
      // 直接返回则会将返回值作为新的整个state
      return action.payload ?? initialState;
    },
    setAccessToken: (state, action: PayloadAction<string>) => {
      state.accessToken = action.payload;
    },
    logout: (state, action: PayloadAction<boolean>) => {
      if (action.payload) {
        return { ...initialState, uid: state.uid };
      } else {
        return initialState;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     // .addCase(loginAsync.pending, (state) => {
  //     //   state.status = "loading";
  //     // })
  //     .addCase(loginAsync.fulfilled, (state, action) => {
  //       state.status = "idle";
  //       state.value += action.payload;
  //     });
  // },
});

// 暴露转换的 actions
export const { setUidAndToken, logout, setUserInfo, setUser, setAccessToken } =
  userSlice.actions;
export const userActions = userSlice.actions;

export const selectUid = (state: AppState) => (<State>state.user).uid;
export const selectUser = (state: AppState) => state.user;

export default userSlice.reducer;
